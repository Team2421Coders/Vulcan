// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2421.Vulcan.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2421.Vulcan.Robot;
import org.usfirst.frc2421.Vulcan.subsystems.Drive;
import java.lang.Math;
import edu.wpi.first.wpilibj.Timer;

/**
 *
 */
public class ZachCommand extends Command {
	public boolean noBubbles = false;
	private static Timer time = new Timer();
	private double currentTime = 0;
	double[] sizeArray;
	double[] xArray;
	private double angle = 45;
	double c;
	double d;
	double avgSize;
	double midpoint;
	double ds;
	double sum;
	double xCircum;
	double distConstant = 61;
	double speed = .3;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public ZachCommand() {
    	

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=R	EQUIRES
    	
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	time.reset();
    	time.start();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	try{
    		sizeArray = Robot.vision.getNumberArray("size", Robot.def);
    		xArray = Robot.vision.getNumberArray("x", Robot.def);
    		if(sizeArray.length >= 3){
    			sum = sizeArray[0] + sizeArray[1] + sizeArray[2];
    			if(sum < 200){
	    			xCircum = (angle/180)*(241-38.8*Math.log(sum))*(Math.PI);
	    			if(xArray[0] < xArray[2]){
	    				currentTime = time.get();
	    				while(time.get() < (currentTime + .25)){
	    					Drive.setLeft(-.5);
	    					Drive.setRight(.5);    					
	    				}
	    				Drive.setLeft(0);
	    				Drive.setRight(0);
	    				currentTime = time.get();
	    				while(time.get() < currentTime + (xCircum/distConstant)){
	    					Drive.setLeft(.5);
	    					Drive.setRight(.5);
	    				}
	    				Drive.setLeft(0);
	    				Drive.setRight(0);
	    				currentTime = time.get();
	    				while(time.get() < (currentTime + .25)){
	    					Drive.setLeft(.5);
	    					Drive.setRight(-.5);
	    				}
	    				Drive.setLeft(0);
	    				Drive.setRight(0);
	    			}
	    			else if(xArray[0] > xArray[2]){
	    				currentTime = time.get();
	    				while(time.get() < (currentTime + .25)){
	    					Drive.setLeft(.5);
	    					Drive.setRight(-.5);    					
	    				}
	    				Drive.setLeft(0);
	    				Drive.setRight(0);
	    				currentTime = time.get();
	    				while(time.get() < currentTime + (xCircum/distConstant)){
	    					Drive.setLeft(.5);
	    					Drive.setRight(.5);
	    				}
	    				Drive.setLeft(0);
	    				Drive.setRight(0);
	    				currentTime = time.get();
	    				while(time.get() < (currentTime + .45)){
	    					Drive.setLeft(-.5);
	    					Drive.setRight(.5);
	    				}
	    				Drive.setLeft(0);
	    				Drive.setRight(0);
	    			}
    			}
    		}
    	}
    	catch(Exception ex){
    		noBubbles = true;
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	if(sizeArray.length >= 3)
    		return false;
    	else
    		return true;
//    	if(Robot.vision.getNumberArray("size", Robot.def).length>0)
//    		return Robot.vision.getNumberArray("size", Robot.def)[0]>100.0;
//        else
//        	return noBubbles;
    }

    // Called once after isFinished returns true
    protected void end() {
    	
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
