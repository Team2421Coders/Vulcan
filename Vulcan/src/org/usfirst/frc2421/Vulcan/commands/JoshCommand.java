// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2421.Vulcan.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2421.Vulcan.Robot;
import org.usfirst.frc2421.Vulcan.subsystems.Drive;
import java.lang.Math;
import edu.wpi.first.wpilibj.Timer;

/**
 *
 */
public class JoshCommand extends Command {
	public boolean noBubbles = false;
	public boolean finished = false;
	double[] sizeArray;
	double[] xArray;
	double c;
	double d;
	double avgSize;
	double midpoint;
	double ds;
	double sum;
	double xCircum;
	double distConstant = 61;
	double speed = .3;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public JoshCommand() {
    	

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=R	EQUIRES
    	
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	try{
    		sizeArray = Robot.vision.getNumberArray("size", Robot.def);
    		xArray = Robot.vision.getNumberArray("x", Robot.def);
    		c = 0.005;
    		d = 0.0005;
    		avgSize = (sizeArray[0] + sizeArray[1])/2;
    		midpoint = (xArray[0] + xArray[1])/2;
    		ds = (midpoint-320)*c*avgSize*d;

    		System.out.println(ds);
    		Drive.setLeft(speed+ds);
    		Drive.setRight(speed-ds);
    	}
    	catch(Exception ex){
    		noBubbles = true;
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	if(Robot.vision.getNumberArray("size", Robot.def).length>0)
    		return Robot.vision.getNumberArray("size", Robot.def)[0]>100.0;
        else{
        	System.out.println("Josh is Done");
        	return noBubbles;
        }
    }

    // Called once after isFinished returns true
    protected void end() {
    	
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
