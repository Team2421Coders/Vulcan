// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2421.Vulcan.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2421.Vulcan.Robot;
import org.usfirst.frc2421.Vulcan.subsystems.Drive;
import org.usfirst.frc2421.Vulcan.subsystems.Gear;

import java.lang.Math;
import edu.wpi.first.wpilibj.Timer;

/**
 *
 */
public class AutonomousCommand extends Command {
	public static boolean noBubbles = false;
	boolean end = false;
	public Command zach = new ZachCommand();
	public Command josh = new JoshCommand();
	public static Timer time = new Timer();
	private static double currentTime = 0;
	public static double[] sizeArray;
	public static double[] sizeL3Array;
	public static double[] sizeL2Array;
	public static double[] xL3Array;
	public static double[] xL2Array;
	public static double[] yArray;
	public static double[] xArray;
	static double avgLength = 0;
	static int arrayCounter = 0;
	static double angle = 45;
	static double counter = 0;
	static double lengthSum = 0;
	static double c;
	static double d;
	static double avgSize;
	static double midpoint;
	static double ds;
	static double sum;
	static double xCircum;
	static double distConstant = 45;
	static double speed = -.25;
	static double targetSize = 75.0;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutonomousCommand() {
    	

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=R	EQUIRES
    	
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	time.start();
		zach();		
		System.out.println("josh");
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	try{
    		updateVisionArrays();
			if(sizeArray[0]<targetSize){
				josh();
			}
			else
			{
				System.out.println("bad");
				Drive.setLeft(0);
				Drive.setRight(0);
			}
    	}
    	catch(Exception ex){
    		noBubbles = true;
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	//System.out.println("FINISHED");
    	
    	if(sizeArray.length>0)
    		return sizeArray[0]>targetSize;
        else
        	return noBubbles;
        	
    	
    }

    // Called once after isFinished returns true
    protected void end() {
    	
    	new GearCommand().start();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	
    }
    public static void updateVisionArrays(){
    	sizeArray = Robot.vision.getNumberArray("size", Robot.def);
		xArray = Robot.vision.getNumberArray("x", Robot.def);
		if(sizeArray.length == 3){
			sizeL3Array = sizeArray;
			xL3Array = xArray;
		}
		if(sizeArray.length == 2){
			sizeL2Array = sizeArray;
			xL2Array = xArray;
		}
    }
    public static double arrayAvgLength(){
    	currentTime = time.get();
    	while(time.get() < (currentTime + 2)){
    		updateVisionArrays();
    		lengthSum += sizeArray.length;
    		counter += 1;
    	}
    	return (lengthSum/counter);
    }
    public static void josh(){
    	//System.out.println("josh");
		c = 0.015;
		d = 0.0008;
		System.out.println(ds);
		avgSize = (sizeL2Array[0] + sizeL2Array[1])/2;
		midpoint = (xL2Array[0] + xL2Array[1])/2;
		ds = (midpoint-320)*c*avgSize*d;
		Drive.setLeft(speed+ds);
		Drive.setRight(speed-ds);
    }
    
    public static void zach(){
    	System.out.println("zach");
    	updateVisionArrays();
    	avgLength = arrayAvgLength();
    	System.out.println(avgLength);
		if(avgLength > 2.3){
			sum = sizeL3Array[0] + sizeL3Array[1] + sizeL3Array[2];
			if(sum < 200){
    			xCircum = (angle/180)*(215-38.8*Math.log(sum))*(Math.PI);
    			
    			//right
    			if(xL3Array[0] < xL3Array[2]){
    				System.out.println("right");
    				currentTime = time.get();
    				while(time.get() < (currentTime + .45)){
    					Drive.setLeft(-.5);
    					Drive.setRight(.5);    					
    				}
    				Drive.setLeft(0);
    				Drive.setRight(0);
    				currentTime = time.get();
    				while(time.get() < currentTime + (xCircum/distConstant)){
    					Drive.setLeft(-.5);
    					Drive.setRight(-.5);
    				}
    				Drive.setLeft(0);
    				Drive.setRight(0);
    				currentTime = time.get();
    				while(time.get() < (currentTime + .6)){
    					Drive.setLeft(.5);
    					Drive.setRight(-.5);
    				}
    				Drive.setLeft(0);
    				Drive.setRight(0);
    			}
    			//left
    			else if(xL3Array[0] > xL3Array[2]){
    				System.out.println("left");
    				currentTime = time.get();
    				while(time.get() < (currentTime + .45)){
    					Drive.setLeft(.5);
    					Drive.setRight(-.5);    					
    				}
    				Drive.setLeft(0);
    				Drive.setRight(0);
    				currentTime = time.get();
    				while(time.get() < currentTime + (xCircum/distConstant)){
    					Drive.setLeft(-.5);
    					Drive.setRight(-.5);
    				}
    				Drive.setLeft(0);
    				Drive.setRight(0);
    				currentTime = time.get();
    				while(time.get() < (currentTime + .6)){
    					Drive.setLeft(-.5);
    					Drive.setRight(.5);
    				}
    				Drive.setLeft(0);
    				Drive.setRight(0);
    			}
    			currentTime = time.get();
    			while(time.get() < currentTime + 1){
    				Drive.setLeft(0);
    				Drive.setRight(0);
    			}
			}
		}
    }
}
