// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2421.Vulcan.subsystems;

import org.usfirst.frc2421.Vulcan.Robot;
import org.usfirst.frc2421.Vulcan.RobotMap;
import org.usfirst.frc2421.Vulcan.commands.*;

import com.ctre.CANTalon;

import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.GenericHID.Hand;


/**
 *
 */
public class Drive extends Subsystem {

	static double speedMult = 1;
	static double turnMult = 1;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private final static Spark driveLeft1 = RobotMap.driveDriveLeft1;
    private final static Spark driveLeft2 = RobotMap.driveDriveLeft2;
    private final static Spark driveRight1 = RobotMap.driveDriveRight1;
    private final static Spark driveRight2 = RobotMap.driveDriveRight2;
    private final RobotDrive driveSystem = RobotMap.driveDriveSystem;
    public static XboxController xbc = RobotMap.xbc;
    private static double xValue;
    private static double yValue;
    private static double leftY = 0;
    private static double leftX = 0;
    private static double rightY = 0;
    private static double rightX = 0;
    private static double finalX = 0;
    private static double finalY = 0;
    private static double deadzone = .2;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DriveCommand());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public static void setLeft(double x){
    	driveLeft1.set(x*speedMult);
    	driveLeft2.set(x*speedMult);
    }
    public static void setRight(double x){
    	driveRight1.set(x*speedMult);
    	driveRight2.set(x*speedMult);
    }
    //CONTROLLER STUFF
    public static void deadzoneTester(GenericHID.Hand hand){
    	if(hand == GenericHID.Hand.kLeft){
    		if(xbc.getX(hand) < -deadzone || xbc.getX(hand) > deadzone){
        		xValue = xbc.getX(hand);
        	}else{
        		xValue = 0;
        		finalX = 0;
        	}
    		leftX = xValue;
    	}
    	if(hand == GenericHID.Hand.kRight){
    		if(xbc.getY(hand) < -deadzone || xbc.getY(hand) > deadzone){
        		yValue = xbc.getY(hand);
        	}else{
        		yValue = 0;
        		finalY = 0;
        	}
    		rightY = yValue;
    	}
    }
    public static void leftJoystick(){
    	Drive.deadzoneTester(GenericHID.Hand.kLeft);
    	if(leftX < 0){
    		finalX = -0.1;
    	}
    	else if(leftX > 0){
    		finalX = 0.1;
    	}
    	System.out.println("lj " + finalX);
    }
    public static void rightJoystick(){
    	Drive.deadzoneTester(GenericHID.Hand.kRight);
    	if(rightY < 0){
    		finalY = -.25;
    	}
    	else if(rightY > 0){
    		finalY = .25;
    	}
    	System.out.println("rj " + finalY);
    }
    public static void setMotors(){
    	Drive.setLeft(finalY + finalX);
    	Drive.setRight(-(finalY - finalX));
    	System.out.println(finalY + finalX);
    	System.out.println(-(finalY - finalX));
    }
    public static void buttonA(){
    	
    }
    public static void buttonB(){
    	
    }
    public static void buttonX(){
    	
    }
    public static void buttonY(){
    	
    }    
    public static void buttons(){
    	Drive.buttonA();
    	Drive.buttonB();
    	Drive.buttonX();
    	Drive.buttonY();
    }
}

